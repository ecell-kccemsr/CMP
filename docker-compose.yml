version: "3.8"

services:
  # API Server
  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    ports:
      - "0.0.0.0:8000:8000" # Bind to all network interfaces
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=db
      - POSTGRES_DB=${POSTGRES_DB}
      - REDIS_HOST=redis
      - SECRET_KEY=${SECRET_KEY}
    depends_on:
      - db
      - redis
    logging:
      driver: "fluentd"
      options:
        fluentd-address: localhost:24224
        tag: api.logs
    networks:
      - streaming_network

  # FFmpeg Worker
  worker:
    build:
      context: .
      dockerfile: Dockerfile.worker
    environment:
      - REDIS_HOST=redis
      - HLS_OUTPUT_DIR=/var/www/streaming/hls
    volumes:
      - hls_data:/var/www/streaming/hls
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - streaming_network

  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./src/database/schema.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "0.0.0.0:5432:5432" # Bind to all network interfaces
    networks:
      - streaming_network

  # Redis
  redis:
    image: redis:alpine
    ports:
      - "0.0.0.0:6379:6379" # Bind to all network interfaces
    volumes:
      - redis_data:/data
    networks:
      - streaming_network

  # NGINX for serving HLS streams
  nginx:
    image: nginx:alpine
    ports:
      - "0.0.0.0:80:80" # Bind to all network interfaces
    volumes:
      - hls_data:/usr/share/nginx/html/hls
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - worker
    networks:
      - streaming_network

  # Dashboard
  dashboard:
    build:
      context: ./dashboard
      dockerfile: Dockerfile
    ports:
      - "0.0.0.0:3000:3000" # Bind to all network interfaces
    networks:
      - streaming_network

  # Monitoring Services
  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/usr/share/prometheus/console_libraries"
      - "--web.console.templates=/usr/share/prometheus/consoles"
    ports:
      - "0.0.0.0:9090:9090" # Bind to all network interfaces
    networks:
      - streaming_network

  grafana:
    image: grafana/grafana:latest
    volumes:
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    ports:
      - "0.0.0.0:3001:3000" # Bind to all network interfaces
    networks:
      - streaming_network

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.9.3
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - streaming_network

  fluentbit:
    image: fluent/fluent-bit:latest
    volumes:
      - ./monitoring/fluentbit/fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    ports:
      - "24224:24224"
      - "24224:24224/udp"
    networks:
      - streaming_network

  node-exporter:
    image: prom/node-exporter:latest
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - "--path.procfs=/host/proc"
      - "--path.sysfs=/host/sys"
      - "--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)"
    networks:
      - streaming_network

  redis-exporter:
    image: oliver006/redis_exporter:latest
    environment:
      - REDIS_ADDR=redis://redis:6379
    networks:
      - streaming_network

  postgres-exporter:
    image: wrouesnel/postgres_exporter:latest
    environment:
      - DATA_SOURCE_NAME=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}?sslmode=disable
    networks:
      - streaming_network

volumes:
  postgres_data:
  redis_data:
  hls_data:
  prometheus_data:
  grafana_data:
  elasticsearch_data:

networks:
  streaming_network:
    driver: bridge
